// components/safetyClassification/SafetyClassificationWizard.tsx
"use client";

import { useState } from "react";
import { ToolWizard, ToolWizardConfig } from "../tools/ToolWizard";
import { ToolReport, ToolReportConfig } from "../tools/ToolReport";
import { useSafetyClassification } from "@/hooks/useSafetyClassification";
import { safetyClassificationConfig } from "@/lib/tools/safetyClassification";
import { CLASSIFICATION_SAFETY_THEME } from "@/lib/pdf/PDFGenerator";
import { SafetyClassificationSession } from "@/types/safetyClassification";

const wizardConfig: ToolWizardConfig = {
  productLabel: "Nom du logiciel m√©dical",
  productPlaceholder: "Ex: CardioMonitor, SurgeryAssist, PatientTracker, etc.",
  usageLabel: "Usage pr√©vu",
  usagePlaceholder: "D√©crivez pr√©cis√©ment l'usage pr√©vu de votre logiciel m√©dical, ses fonctionnalit√©s, les utilisateurs cibles, et l'environnement d'utilisation...",
  usageHint: "Pr√©cisez les fonctions critiques et l'impact sur la s√©curit√© patient.",
  contextAlert: {
    title: "Classification de s√©curit√© IEC 62304",
    description: "Cet outil d√©termine la classe de s√©curit√© (A, B, C) de votre logiciel m√©dical selon la norme IEC 62304 ¬ß4.3, en fonction des risques de pr√©judice en cas de d√©faillance.",
    icon: <span className="text-amber-600">üõ°Ô∏è</span>
  },
  theme: {
    primary: "purple-600",
    primaryHover: "purple-700",
    accent: "violet-600",
    gradient: "from-purple-600 to-violet-600"
  },
  totalQuestions: 2
};

const reportConfig: ToolReportConfig = {
  productLabel: "Logiciel m√©dical √©valu√©",
  theme: {
    primary: "purple",
    accent: "violet",
    gradient: "from-purple-600 to-violet-600"
  },
  regulation: "IEC 62304:2006+A1:2015 ‚Ä¢ ¬ß4.3",
  toolVersion: "2024.1",
  positiveResultIds: ["SAFETY_CLASS_A", "SAFETY_CLASS_B", "SAFETY_CLASS_C"] // Tous sont des r√©sultats "positifs"
};

export function SafetyClassificationWizard() {
  const [showReport, setShowReport] = useState(false);
  const [currentSession, setCurrentSession] = useState<SafetyClassificationSession | null>(null);

  const handleShowReport = (session: SafetyClassificationSession) => {
    setCurrentSession(session);
    setShowReport(true);
  };

  const handleBackToWizard = () => {
    setShowReport(false);
    setCurrentSession(null);
  };

  if (showReport && currentSession) {
    return (
      <ToolReport 
        session={currentSession}
        config={reportConfig}
        pdfTheme={CLASSIFICATION_SAFETY_THEME}
        onBack={handleBackToWizard}
      />
    );
  }

  return (
    <ToolWizard
      config={safetyClassificationConfig}
      wizardConfig={wizardConfig}
      useTool={useSafetyClassification}
      onShowReport={handleShowReport}
    />
  );

  
}


