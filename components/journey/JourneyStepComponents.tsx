// components/journey/JourneyStepComponents.tsx
"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ToolWizard } from "@/components/tools/ToolWizard";
import { qualificationConfig } from "@/lib/tools/qualification";
import { regulatoryConfig } from "@/lib/tools/regulatory";
import { classificationConfig } from "@/lib/tools/classificationDm";
import { classificationDmdivConfig } from "@/lib/tools/classificationDmdiv";
import { safetyClassificationConfig } from "@/lib/tools/safetyClassification";

interface StepWrapperProps {
  tool: any;
  onComplete: (session: any, result: any) => void;
  title: string;
  description: string;
  icon: string;
  color: string;
  productName: string;
  intendedUse: string;
  config: any;
  wizardConfig: any;
}

function StepWrapper({ 
  tool, 
  onComplete, 
  title, 
  description, 
  icon, 
  color, 
  productName, 
  intendedUse, 
  config, 
  wizardConfig 
}: StepWrapperProps) {
  const [isInitialized, setIsInitialized] = useState(false);
  
  useEffect(() => {
    // D√©marrer automatiquement la session avec les informations du parcours
    if (!tool.session && productName && intendedUse && !isInitialized) {
      tool.startSession(productName, intendedUse);
      setIsInitialized(true);
    }
  }, [tool, productName, intendedUse, isInitialized]);

  // NE PAS appeler onComplete ici - laisser le JourneyWizard s'en charger
  // en surveillant directement tool.session?.status

  return (
    <div className="space-y-6">
      {/* En-t√™te de l'√©tape avec design am√©lior√© */}
      <Card className="border-2 border-gray-200 bg-gradient-to-br from-white to-gray-50 shadow-lg">
        <CardHeader className="pb-6">
          <div className="flex items-center gap-4">
            <div className={`w-16 h-16 bg-gradient-to-br from-${color}-500 to-${color}-600 rounded-xl flex items-center justify-center shadow-lg`}>
              <span className="text-2xl text-white">{icon}</span>
            </div>
            <div className="flex-1">
              <CardTitle className={`text-${color}-900 text-2xl font-bold mb-2`}>
                {title}
              </CardTitle>
              <CardDescription className={`text-${color}-700 text-base leading-relaxed`}>
                {description}
              </CardDescription>
            </div>
          </div>
        </CardHeader>
      </Card>
      
      {/* Contenu de l'outil - toujours visible */}
      <Card className="bg-white shadow-sm border border-gray-200">
        <CardContent className="p-0">
          <div className="min-h-[400px]">
            <ToolWizard
              config={config}
              wizardConfig={{
                ...wizardConfig,
                hideInitialForm: true,
                autoStart: true,
                initialProductName: productName,
                initialIntendedUse: intendedUse
              }}
              useTool={() => tool}
              onShowReport={() => {}} // Pas de rapport individuel dans le parcours
            />
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

export function QualificationStepWrapper({ 
  tool, 
  onComplete, 
  productName, 
  intendedUse 
}: { 
  tool: any; 
  onComplete: any; 
  productName: string; 
  intendedUse: string; 
}) {
  const wizardConfig = {
    productLabel: "Nom du produit",
    productPlaceholder: "Ex: MonApp Diagnostic, Syst√®me de Monitoring, etc.",
    usageLabel: "Usage pr√©vu",
    usagePlaceholder: "D√©crivez pr√©cis√©ment l'usage pr√©vu de votre logiciel...",
    usageHint: "Plus votre description est pr√©cise, plus l'√©valuation sera pertinente.",
    theme: {
      primary: "blue-600",
      primaryHover: "blue-700",
      accent: "cyan-600",
      gradient: "from-blue-600 to-cyan-600"
    },
    totalQuestions: 5
  };

  return (
    <StepWrapper
      tool={tool}
      onComplete={onComplete}
      title="√âtape 1 : Qualification"
      description="D√©terminons si votre produit est un dispositif m√©dical selon le MDR"
      icon="üè•"
      color="blue"
      productName={productName}
      intendedUse={intendedUse}
      config={qualificationConfig}
      wizardConfig={wizardConfig}
    />
  );
}

export function RegulatoryStepWrapper({ 
  tool, 
  onComplete, 
  productName, 
  intendedUse 
}: { 
  tool: any; 
  onComplete: any; 
  productName: string; 
  intendedUse: string; 
}) {
  const wizardConfig = {
    productLabel: "Nom du dispositif",
    productPlaceholder: "Ex: Syst√®me DiagnoLab, Plateforme BioAnalyzer, etc.",
    usageLabel: "Usage pr√©vu",
    usagePlaceholder: "D√©crivez pr√©cis√©ment l'usage pr√©vu de votre dispositif...",
    usageHint: "Pr√©cisez notamment le type d'informations fournies (diagnostiques, pr√©ventives, etc.).",
    contextAlert: {
      title: "Contexte r√©glementaire",
      description: "Cet outil utilise la Figure 2 du MDCG 2019-11 rev.2.1 pour diff√©rencier les dispositifs relevant du MDR (dispositifs m√©dicaux classiques) de ceux relevant de l'IVDR (dispositifs de diagnostic in vitro).",
      icon: "‚ÑπÔ∏è"
    },
    theme: {
      primary: "indigo-600",
      primaryHover: "indigo-700",
      accent: "cyan-600",
      gradient: "from-indigo-600 to-cyan-600"
    },
    totalQuestions: 3
  };

  return (
    <StepWrapper
      tool={tool}
      onComplete={onComplete}
      title="√âtape 2 : R√©glementation applicable"
      description="D√©terminons si votre dispositif rel√®ve du MDR ou de l'IVDR"
      icon="üìã"
      color="indigo"
      productName={productName}
      intendedUse={intendedUse}
      config={regulatoryConfig}
      wizardConfig={wizardConfig}
    />
  );
}

export function ClassificationDmStepWrapper({ 
  tool, 
  onComplete, 
  productName, 
  intendedUse 
}: { 
  tool: any; 
  onComplete: any; 
  productName: string; 
  intendedUse: string; 
}) {
  const wizardConfig = {
    productLabel: "Nom du logiciel m√©dical",
    productPlaceholder: "Ex: DiagnoSoft, CardioMonitor, TherapyAssist, etc.",
    usageLabel: "Usage pr√©vu",
    usagePlaceholder: "D√©crivez pr√©cis√©ment l'usage pr√©vu de votre logiciel m√©dical...",
    usageHint: "Soyez pr√©cis sur le type d'informations trait√©es et leur utilisation clinique.",
    contextAlert: {
      title: "Pr√©requis important",
      description: "Cet outil s'applique uniquement aux logiciels d√©j√† qualifi√©s comme dispositifs m√©dicaux (MDSW). Il utilise la r√®gle 11 du MDR 2017/745 selon le MDCG 2019-11 rev.2.1.",
      icon: "‚ö†Ô∏è"
    },
    theme: {
      primary: "green-600",
      primaryHover: "green-700",
      accent: "emerald-600",
      gradient: "from-green-600 to-emerald-600"
    },
    totalQuestions: 5
  };

  return (
    <StepWrapper
      tool={tool}
      onComplete={onComplete}
      title="√âtape 3 : Classification DM"
      description="Classification selon la r√®gle 11 du MDR 2017/745"
      icon="üìä"
      color="green"
      productName={productName}
      intendedUse={intendedUse}
      config={classificationConfig}
      wizardConfig={wizardConfig}
    />
  );
}

export function ClassificationDmdivStepWrapper({ 
  tool, 
  onComplete, 
  productName, 
  intendedUse 
}: { 
  tool: any; 
  onComplete: any; 
  productName: string; 
  intendedUse: string; 
}) {
  const wizardConfig = {
    productLabel: "Nom du logiciel DMDIV",
    productPlaceholder: "Ex: DiagnoLab, BioAnalyzer, PathogenDetect, etc.",
    usageLabel: "Usage pr√©vu",
    usagePlaceholder: "D√©crivez pr√©cis√©ment l'usage pr√©vu de votre logiciel DMDIV...",
    usageHint: "Pr√©cisez le type d'analyses IVD et leur finalit√© clinique.",
    contextAlert: {
      title: "Pr√©requis important",
      description: "Cet outil s'applique uniquement aux logiciels d√©j√† qualifi√©s comme dispositifs m√©dicaux de diagnostic in vitro (DMDIV). Il utilise les r√®gles 1-7 de l'IVDR 2017/746.",
      icon: "‚ö†Ô∏è"
    },
    theme: {
      primary: "cyan-600",
      primaryHover: "cyan-700",
      accent: "teal-600",
      gradient: "from-cyan-600 to-teal-600"
    },
    totalQuestions: 4
  };

  return (
    <StepWrapper
      tool={tool}
      onComplete={onComplete}
      title="√âtape 3 : Classification DMDIV"
      description="Classification selon les r√®gles 1-7 de l'IVDR 2017/746"
      icon="üß™"
      color="cyan"
      productName={productName}
      intendedUse={intendedUse}
      config={classificationDmdivConfig}
      wizardConfig={wizardConfig}
    />
  );
}

export function SafetyClassificationStepWrapper({ 
  tool, 
  onComplete, 
  productName, 
  intendedUse 
}: { 
  tool: any; 
  onComplete: any; 
  productName: string; 
  intendedUse: string; 
}) {
  const wizardConfig = {
    productLabel: "Nom du logiciel m√©dical",
    productPlaceholder: "Ex: CardioMonitor, SurgeryAssist, PatientTracker, etc.",
    usageLabel: "Usage pr√©vu",
    usagePlaceholder: "D√©crivez pr√©cis√©ment l'usage pr√©vu de votre logiciel m√©dical...",
    usageHint: "Pr√©cisez les fonctions critiques et l'impact sur la s√©curit√© patient.",
    contextAlert: {
      title: "Classification de s√©curit√© IEC 62304",
      description: "Cet outil d√©termine la classe de s√©curit√© (A, B, C) de votre logiciel m√©dical selon la norme IEC 62304 ¬ß4.3, en fonction des risques de pr√©judice en cas de d√©faillance.",
      icon: "üõ°Ô∏è"
    },
    theme: {
      primary: "purple-600",
      primaryHover: "purple-700",
      accent: "violet-600",
      gradient: "from-purple-600 to-violet-600"
    },
    totalQuestions: 2
  };

  return (
    <StepWrapper
      tool={tool}
      onComplete={onComplete}
      title="√âtape 4 : Classification de S√©curit√©"
      description="Classification selon la norme IEC 62304 ¬ß4.3"
      icon="üõ°Ô∏è"
      color="purple"
      productName={productName}
      intendedUse={intendedUse}
      config={safetyClassificationConfig}
      wizardConfig={wizardConfig}
    />
  );
}